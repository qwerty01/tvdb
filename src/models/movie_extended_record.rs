/*
 * TVDB API V4
 *
 * Documentation of [TheTVDB](https://thetvdb.com/) API V4. All related information is linked from our [Github repo](https://github.com/thetvdb/v4-api). You might also want to use our [Postman collection] (https://www.getpostman.com/collections/7a9397ce69ff246f74d0) ## Authentication 1. Use the /login endpoint and provide your API key as \"apikey\". If you have a user-supported key, also provide your subscriber PIN as \"pin\". Otherwise completely remove \"pin\" from your call. 2. Executing this call will provide you with a bearer token, which is valid for 1 month. 3. Provide your bearer token for subsequent API calls by clicking Authorize below or including in the header of all direct API calls: `Authorization: Bearer [your-token]`  ## Notes 1. \"score\" is a field across almost all entities.  We generate scores for different types of entities in various ways, so no assumptions should be made about the meaning of this value.  It is simply used to hint at relative popularity for sorting purposes.
 *
 * The version of the OpenAPI document: 4.7.8
 *
 * Generated by: https://openapi-generator.tech
 */

/// MovieExtendedRecord : extended movie record

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MovieExtendedRecord {
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<crate::models::Alias>>,
    #[serde(rename = "artworks", skip_serializing_if = "Option::is_none")]
    pub artworks: Option<Vec<crate::models::ArtworkBaseRecord>>,
    #[serde(rename = "audioLanguages", skip_serializing_if = "Option::is_none")]
    pub audio_languages: Option<Vec<String>>,
    #[serde(rename = "awards", skip_serializing_if = "Option::is_none")]
    pub awards: Option<Vec<crate::models::AwardBaseRecord>>,
    #[serde(rename = "boxOffice", skip_serializing_if = "Option::is_none")]
    pub box_office: Option<String>,
    #[serde(rename = "boxOfficeUS", skip_serializing_if = "Option::is_none")]
    pub box_office_us: Option<String>,
    #[serde(rename = "budget", skip_serializing_if = "Option::is_none")]
    pub budget: Option<String>,
    #[serde(rename = "characters", skip_serializing_if = "Option::is_none")]
    pub characters: Option<Vec<crate::models::Character>>,
    #[serde(rename = "companies", skip_serializing_if = "Option::is_none")]
    pub companies: Option<crate::models::Companies>,
    #[serde(rename = "contentRatings", skip_serializing_if = "Option::is_none")]
    pub content_ratings: Option<Vec<crate::models::ContentRating>>,
    #[serde(rename = "first_release", skip_serializing_if = "Option::is_none")]
    pub first_release: Option<crate::models::Release>,
    #[serde(rename = "genres", skip_serializing_if = "Option::is_none")]
    pub genres: Option<Vec<crate::models::GenreBaseRecord>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "inspirations", skip_serializing_if = "Option::is_none")]
    pub inspirations: Option<Vec<crate::models::Inspiration>>,
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
    #[serde(rename = "lists", skip_serializing_if = "Option::is_none")]
    pub lists: Option<Vec<crate::models::ListBaseRecord>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "nameTranslations", skip_serializing_if = "Option::is_none")]
    pub name_translations: Option<Vec<String>>,
    #[serde(rename = "originalCountry", skip_serializing_if = "Option::is_none")]
    pub original_country: Option<String>,
    #[serde(rename = "originalLanguage", skip_serializing_if = "Option::is_none")]
    pub original_language: Option<String>,
    #[serde(
        rename = "overviewTranslations",
        skip_serializing_if = "Option::is_none"
    )]
    pub overview_translations: Option<Vec<String>>,
    #[serde(
        rename = "production_countries",
        skip_serializing_if = "Option::is_none"
    )]
    pub production_countries: Option<Vec<crate::models::ProductionCountry>>,
    #[serde(rename = "releases", skip_serializing_if = "Option::is_none")]
    pub releases: Option<Vec<crate::models::Release>>,
    #[serde(rename = "remoteIds", skip_serializing_if = "Option::is_none")]
    pub remote_ids: Option<Vec<crate::models::RemoteId>>,
    #[serde(rename = "runtime", skip_serializing_if = "Option::is_none")]
    pub runtime: Option<i32>,
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<f64>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[serde(rename = "spoken_languages", skip_serializing_if = "Option::is_none")]
    pub spoken_languages: Option<Vec<String>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::Status>>,
    #[serde(rename = "studios", skip_serializing_if = "Option::is_none")]
    pub studios: Option<Vec<crate::models::StudioBaseRecord>>,
    #[serde(rename = "subtitleLanguages", skip_serializing_if = "Option::is_none")]
    pub subtitle_languages: Option<Vec<String>>,
    #[serde(rename = "tagOptions", skip_serializing_if = "Option::is_none")]
    pub tag_options: Option<Vec<crate::models::TagOption>>,
    #[serde(rename = "trailers", skip_serializing_if = "Option::is_none")]
    pub trailers: Option<Vec<crate::models::Trailer>>,
    #[serde(rename = "translations", skip_serializing_if = "Option::is_none")]
    pub translations: Option<Box<crate::models::TranslationExtended>>,
    #[serde(rename = "year", skip_serializing_if = "Option::is_none")]
    pub year: Option<String>,
}

impl MovieExtendedRecord {
    /// extended movie record
    pub fn new() -> MovieExtendedRecord {
        MovieExtendedRecord {
            aliases: None,
            artworks: None,
            audio_languages: None,
            awards: None,
            box_office: None,
            box_office_us: None,
            budget: None,
            characters: None,
            companies: None,
            content_ratings: None,
            first_release: None,
            genres: None,
            id: None,
            image: None,
            inspirations: None,
            last_updated: None,
            lists: None,
            name: None,
            name_translations: None,
            original_country: None,
            original_language: None,
            overview_translations: None,
            production_countries: None,
            releases: None,
            remote_ids: None,
            runtime: None,
            score: None,
            slug: None,
            spoken_languages: None,
            status: None,
            studios: None,
            subtitle_languages: None,
            tag_options: None,
            trailers: None,
            translations: None,
            year: None,
        }
    }
}
